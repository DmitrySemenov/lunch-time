//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dinner.Storage.Repository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Company> Companies { get; set; }
        public DbSet<Course> Courses { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<CourseCategory> CourseCategories { get; set; }
        public DbSet<Menu> Menus { get; set; }
        public DbSet<OrderItem> OrderItems { get; set; }
        public DbSet<UserSetting> UserSettings { get; set; }
        public DbSet<CompanySetting> CompanySettings { get; set; }
        public DbSet<EventLog> EventLogs { get; set; }
        public DbSet<Feedback> Feedbacks { get; set; }
        public DbSet<FeedbackType> FeedbackTypes { get; set; }
        public DbSet<MenuItemWish> MenuItemWishes { get; set; }
        public DbSet<IdentityCard> IdentityCards { get; set; }
    
        public virtual ObjectResult<p_GetDayMenu_Result> p_GetDayMenu(Nullable<int> companyID, Nullable<System.DateTime> date)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_GetDayMenu_Result>("p_GetDayMenu", companyIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<p_GetCourses_Result> p_GetCourses(Nullable<int> companyID, Nullable<bool> includeDeleted)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var includeDeletedParameter = includeDeleted.HasValue ?
                new ObjectParameter("IncludeDeleted", includeDeleted) :
                new ObjectParameter("IncludeDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_GetCourses_Result>("p_GetCourses", companyIDParameter, includeDeletedParameter);
        }
    
        public virtual int p_MarkCourseAsDeleted(Nullable<int> companyID, Nullable<int> courseID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_MarkCourseAsDeleted", companyIDParameter, courseIDParameter);
        }
    
        public virtual ObjectResult<p_UpsertCourse_Result> p_UpsertCourse(Nullable<int> companyID, Nullable<int> courseID, Nullable<int> courseCategoryID, string name, string description, Nullable<decimal> price, string weight)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var courseCategoryIDParameter = courseCategoryID.HasValue ?
                new ObjectParameter("CourseCategoryID", courseCategoryID) :
                new ObjectParameter("CourseCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var weightParameter = weight != null ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_UpsertCourse_Result>("p_UpsertCourse", companyIDParameter, courseIDParameter, courseCategoryIDParameter, nameParameter, descriptionParameter, priceParameter, weightParameter);
        }
    
        public virtual ObjectResult<p_GetAllOrdersByDate_Result> p_GetAllOrdersByDate(Nullable<int> companyID, Nullable<System.DateTime> date)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_GetAllOrdersByDate_Result>("p_GetAllOrdersByDate", companyIDParameter, dateParameter);
        }
    
        public virtual int p_DeleteCourseFromMenu(Nullable<int> courseID, Nullable<System.DateTime> date)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_DeleteCourseFromMenu", courseIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<p_GetDayTiming_Result> p_GetDayTiming(Nullable<int> companyID, Nullable<System.DateTime> date)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_GetDayTiming_Result>("p_GetDayTiming", companyIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<Nullable<System.TimeSpan>> p_GetOrderTime(Nullable<int> userID, Nullable<System.DateTime> date)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.TimeSpan>>("p_GetOrderTime", userIDParameter, dateParameter);
        }
    
        public virtual int p_SetOrderTime(Nullable<int> userID, Nullable<System.DateTime> date, Nullable<System.TimeSpan> time)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_SetOrderTime", userIDParameter, dateParameter, timeParameter);
        }
    
        public virtual ObjectResult<p_UpsertCourseToMenu_Result> p_UpsertCourseToMenu(Nullable<int> courseID, Nullable<System.DateTime> date, Nullable<decimal> limit)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_UpsertCourseToMenu_Result>("p_UpsertCourseToMenu", courseIDParameter, dateParameter, limitParameter);
        }
    
        public virtual int p_DeleteCourse(Nullable<int> companyID, Nullable<int> courseID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_DeleteCourse", companyIDParameter, courseIDParameter);
        }
    
        public virtual ObjectResult<p_GetUserOrderTime_Result> p_GetUserOrderTime(Nullable<int> userID, Nullable<System.DateTime> date)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_GetUserOrderTime_Result>("p_GetUserOrderTime", userIDParameter, dateParameter);
        }
    
        public virtual int p_SetUserTime(Nullable<int> userID, Nullable<System.TimeSpan> time)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_SetUserTime", userIDParameter, timeParameter);
        }
    
        public virtual int ip_ClearDeletedCourses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ip_ClearDeletedCourses");
        }
    
        public virtual ObjectResult<p_AddOrderItem_Result> p_AddOrderItem(Nullable<int> userID, Nullable<int> courseID, Nullable<System.DateTime> date, Nullable<decimal> quantity)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_AddOrderItem_Result>("p_AddOrderItem", userIDParameter, courseIDParameter, dateParameter, quantityParameter);
        }
    
        public virtual ObjectResult<p_ChangeOrderItemBoxindex_Result> p_ChangeOrderItemBoxindex(Nullable<int> orderItemID, Nullable<int> userID, Nullable<System.DateTime> date, Nullable<decimal> quantity, Nullable<short> boxindex)
        {
            var orderItemIDParameter = orderItemID.HasValue ?
                new ObjectParameter("OrderItemID", orderItemID) :
                new ObjectParameter("OrderItemID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var boxindexParameter = boxindex.HasValue ?
                new ObjectParameter("Boxindex", boxindex) :
                new ObjectParameter("Boxindex", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_ChangeOrderItemBoxindex_Result>("p_ChangeOrderItemBoxindex", orderItemIDParameter, userIDParameter, dateParameter, quantityParameter, boxindexParameter);
        }
    
        public virtual ObjectResult<p_DeleteOrderItem_Result> p_DeleteOrderItem(Nullable<int> userID, Nullable<System.DateTime> date, Nullable<int> orderItemID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var orderItemIDParameter = orderItemID.HasValue ?
                new ObjectParameter("OrderItemID", orderItemID) :
                new ObjectParameter("OrderItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_DeleteOrderItem_Result>("p_DeleteOrderItem", userIDParameter, dateParameter, orderItemIDParameter);
        }
    
        public virtual ObjectResult<p_GetUserOrderForDay_Result> p_GetUserOrderForDay(Nullable<int> companyID, Nullable<int> userID, Nullable<System.DateTime> date)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_GetUserOrderForDay_Result>("p_GetUserOrderForDay", companyIDParameter, userIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<p_GetUserOrderForPeriod_Result> p_GetUserOrderForPeriod(Nullable<int> companyID, Nullable<int> userID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_GetUserOrderForPeriod_Result>("p_GetUserOrderForPeriod", companyIDParameter, userIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<p_StatisticByCourse_Result> p_StatisticByCourse(Nullable<int> companyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_StatisticByCourse_Result>("p_StatisticByCourse", companyIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<p_StatisticByDays_Result> p_StatisticByDays(Nullable<int> companyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_StatisticByDays_Result>("p_StatisticByDays", companyIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<p_StatisticByUsers_Result> p_StatisticByUsers(Nullable<int> companyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_StatisticByUsers_Result>("p_StatisticByUsers", companyIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<p_GetUsersForNotification_Result> p_GetUsersForNotification(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_GetUsersForNotification_Result>("p_GetUsersForNotification", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<p_StatisticByCourseBuyout_Result> p_StatisticByCourseBuyout(Nullable<int> companyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_StatisticByCourseBuyout_Result>("p_StatisticByCourseBuyout", companyIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<p_StatisticByCourseDeficit_Result> p_StatisticByCourseDeficit(Nullable<int> companyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_StatisticByCourseDeficit_Result>("p_StatisticByCourseDeficit", companyIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> p_AddCompany(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("p_AddCompany", nameParameter);
        }
    
        public virtual int p_ChangeCompanyName(Nullable<int> companyID, string name)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_ChangeCompanyName", companyIDParameter, nameParameter);
        }
    
        public virtual int p_DeleteCompany(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_DeleteCompany", companyIDParameter);
        }
    
        public virtual ObjectResult<p_GetCoursePicture_Result> p_GetCoursePicture(Nullable<int> companyID, Nullable<int> courseID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_GetCoursePicture_Result>("p_GetCoursePicture", companyIDParameter, courseIDParameter);
        }
    
        public virtual ObjectResult<p_GetCoursePicture_Result> p_GetCoursePictures(Nullable<int> companyID, Nullable<bool> includeDeleted)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var includeDeletedParameter = includeDeleted.HasValue ?
                new ObjectParameter("IncludeDeleted", includeDeleted) :
                new ObjectParameter("IncludeDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_GetCoursePicture_Result>("p_GetCoursePictures", companyIDParameter, includeDeletedParameter);
        }
    
        public virtual int p_UpsertCoursePicture(Nullable<int> companyID, Nullable<int> courseID, byte[] picture)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("Picture", picture) :
                new ObjectParameter("Picture", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_UpsertCoursePicture", companyIDParameter, courseIDParameter, pictureParameter);
        }
    
        public virtual int p_MenuItemWish_Delete(Nullable<int> customerUserID, Nullable<int> menuItemID, Nullable<System.DateTime> date)
        {
            var customerUserIDParameter = customerUserID.HasValue ?
                new ObjectParameter("CustomerUserID", customerUserID) :
                new ObjectParameter("CustomerUserID", typeof(int));
    
            var menuItemIDParameter = menuItemID.HasValue ?
                new ObjectParameter("MenuItemID", menuItemID) :
                new ObjectParameter("MenuItemID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_MenuItemWish_Delete", customerUserIDParameter, menuItemIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<p_MenuItemWish_Get_Result> p_MenuItemWish_Get(Nullable<int> customerUserID, Nullable<System.DateTime> date)
        {
            var customerUserIDParameter = customerUserID.HasValue ?
                new ObjectParameter("CustomerUserID", customerUserID) :
                new ObjectParameter("CustomerUserID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_MenuItemWish_Get_Result>("p_MenuItemWish_Get", customerUserIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<p_MenuItemWish_Get_Result> p_MenuItemWish_GetAll(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_MenuItemWish_Get_Result>("p_MenuItemWish_GetAll", dateParameter);
        }
    
        public virtual int p_MenuItemWish_Upsert(Nullable<int> customerUserID, Nullable<int> menuItemID, Nullable<System.DateTime> date)
        {
            var customerUserIDParameter = customerUserID.HasValue ?
                new ObjectParameter("CustomerUserID", customerUserID) :
                new ObjectParameter("CustomerUserID", typeof(int));
    
            var menuItemIDParameter = menuItemID.HasValue ?
                new ObjectParameter("MenuItemID", menuItemID) :
                new ObjectParameter("MenuItemID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_MenuItemWish_Upsert", customerUserIDParameter, menuItemIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<p_Order_GetByIdentityCard_Result> p_Order_GetByIdentityCard(Nullable<int> supplierCompanyID, Nullable<System.DateTime> date, string identityCard)
        {
            var supplierCompanyIDParameter = supplierCompanyID.HasValue ?
                new ObjectParameter("SupplierCompanyID", supplierCompanyID) :
                new ObjectParameter("SupplierCompanyID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var identityCardParameter = identityCard != null ?
                new ObjectParameter("IdentityCard", identityCard) :
                new ObjectParameter("IdentityCard", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_Order_GetByIdentityCard_Result>("p_Order_GetByIdentityCard", supplierCompanyIDParameter, dateParameter, identityCardParameter);
        }
    
        public virtual int p_Order_SetPurchased(Nullable<int> orderID, Nullable<System.TimeSpan> time, Nullable<bool> isPurchased)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(System.TimeSpan));
    
            var isPurchasedParameter = isPurchased.HasValue ?
                new ObjectParameter("IsPurchased", isPurchased) :
                new ObjectParameter("IsPurchased", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_Order_SetPurchased", orderIDParameter, timeParameter, isPurchasedParameter);
        }
    
        public virtual ObjectResult<p_IdentityCard_CheckNumber_Result> p_IdentityCard_CheckNumber(string identityCard)
        {
            var identityCardParameter = identityCard != null ?
                new ObjectParameter("IdentityCard", identityCard) :
                new ObjectParameter("IdentityCard", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_IdentityCard_CheckNumber_Result>("p_IdentityCard_CheckNumber", identityCardParameter);
        }
    
        public virtual ObjectResult<p_UserOrder_GetByID_Result> p_UserOrder_GetByID(Nullable<int> orderID, Nullable<System.DateTime> date)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_UserOrder_GetByID_Result>("p_UserOrder_GetByID", orderIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<p_Order_Delete_Result> p_Order_Delete(Nullable<int> orderID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_Order_Delete_Result>("p_Order_Delete", orderIDParameter);
        }
    
        public virtual int p_CustomerUser_Insert(Nullable<int> customerCompanyID, string name, string login, string passwordMD5, Nullable<int> roleID)
        {
            var customerCompanyIDParameter = customerCompanyID.HasValue ?
                new ObjectParameter("CustomerCompanyID", customerCompanyID) :
                new ObjectParameter("CustomerCompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordMD5Parameter = passwordMD5 != null ?
                new ObjectParameter("PasswordMD5", passwordMD5) :
                new ObjectParameter("PasswordMD5", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_CustomerUser_Insert", customerCompanyIDParameter, nameParameter, loginParameter, passwordMD5Parameter, roleIDParameter);
        }
    }
}
