@using Dinner.Entities
@{
    ViewBag.Title = "Расписание";
    Layout = "~/Views/Shared/_LayoutWithMenu.cshtml";
    var data = new[]
        {
            new TimingModel { Time = new TimeSpan(12, 0, 0), Count = 10 },
            new TimingModel { Time = new TimeSpan(12, 30, 0), Count = 5 },
            new TimingModel { Time = new TimeSpan(12, 40, 0), Count = 3 },
            new TimingModel { Time = new TimeSpan(12, 50, 0), Count = 15 },
            new TimingModel { Time = new TimeSpan(13, 10, 0), Count = 10 },
            new TimingModel { Time = new TimeSpan(13, 20, 0), Count = 30 },
            new TimingModel { Time = new TimeSpan(13, 30, 0), Count = 40 },
            new TimingModel { Time = new TimeSpan(13, 40, 0), Count = 20 },
            new TimingModel { Time = new TimeSpan(13, 50, 0), Count = 5 },
            new TimingModel { Time = new TimeSpan(14, 0, 0), Count = 3 },
            new TimingModel { Time = new TimeSpan(14, 30, 0), Count = 5 },
            new TimingModel { Time = new TimeSpan(15, 0, 0), Count = 10 },
            new TimingModel { Time = new TimeSpan(15, 20, 0), Count = 7 },
            new TimingModel { Time = new TimeSpan(15, 40, 0), Count = 2 }
        };
}

<div class="row">
    <div class="col-lg-12">
        <h3 class="accent-color uppercase">
            <i class="glyphicon glyphicon-list-alt"></i>
            Расписание на @Model.Date.ToString("D")
        </h3>        
        <hr>
    </div>
</div>

<div class="row">
    <div class="col-md-6 col-lg-7" id="chartArea">
        <canvas id="timingChart"></canvas>
    </div>
    <div class="col-md-6 col-lg-5">
        <h3 class="accent-color uppercase">
            <i class="glyphicon glyphicon-time"></i>
            Указать время обеда
        </h3>
        <hr />
        @using (Html.BeginForm("ChangeTime", "Timing", FormMethod.Post, htmlAttributes: new { data_change_time = "true", @class = "form-inline" }))
        {
            <input type="hidden" name="Date" value="@Model.Date.ToString("yyyy-MM-dd")" />
            <div class="form-group">
                <select name="Hour" class="form-control" style="width: 85px;">
                    <option selected="selected" disabled="disabled">--</option>
                    @for (int hour = 12; hour < 16; hour++)
                    {
                        <option>@hour.ToString("D2")</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <select name="Minutes" class="form-control" style="width: 85px;">
                    <option selected="selected" disabled="disabled">--</option>
                    @for (int minutes = 0; minutes < 60; minutes += 10)
                    {
                        <option>@minutes.ToString("D2")</option>
                    }
                </select>
            </div>
            <button type="submit" class="btn btn-success">Сохранить</button>
            <button data-clear="true" type="button" class="btn btn-default">Очистить</button>
        }
        <div>
            <span class="text-muted">
                Ваше время обеда по-умолчанию: 13:30 (<a href="#">изменить</a>)
            </span>
        </div>
    </div>
</div>
<script>
    $(function() {
        var source = @Html.Raw(Json.Encode(data.OrderBy(item => item.Time).Select(item => new {hour = item.Time.Value.Hours, minutes = item.Time.Value.Minutes, count = item.Count})));

        var updateChartSize = function() {
            var width = $('#chartArea').width();
            var height = width / 3 * 2;
            $('#timingChart').attr('width', width + 'px');
            $('#timingChart').attr('height', height + 'px');
        };

        var updateChart = function() {
            var ctx = $("#timingChart").get(0).getContext("2d");

            var sourceIndex = 0;
            var labels = [];
            var dataValues = [];
            for (var hour = 12; hour < 16; hour++) {
                for (var minute = 0; minute < 60; minute += 10) {
                    if (minute === 0 || minute === 30) {
                        labels.push(hour + ':' + (minute || '00'));
                    } else {
                        labels.push('');
                    }

                    var value = 0;
                    while (sourceIndex < source.length && source[sourceIndex].hour <= hour && source[sourceIndex].minutes <= minute) {
                        value += source[sourceIndex].count;
                        sourceIndex++;
                    }
                    dataValues.push(value);
                }
            }
            labels.push('16:00');
            dataValues.push(0);


            var data = {
                labels: labels,
                datasets: [
                    {
                        fillColor: "rgba(215, 99, 78, 0.5)",
                        strokeColor: "rgba(215, 99, 78,1)",
                        pointColor: "rgba(215, 99, 78,1)",
                        pointStrokeColor: "#fff",
                        data: dataValues
                    }
                ]
            };

            var chart = new Chart(ctx).Line(data, {
                scaleOverride: true,
                scaleSteps: 8,
                scaleStepWidth: 5,
                scaleStartValue: 0
            });
        };


        $(window).on('resize', function() {
            updateChartSize();
            updateChart();
        });

        updateChartSize();
        updateChart();


        $('[data-change-time]').ajaxForm({
            success: function(response, status, xhr, $form) {
                source = response;
                updateChart();
                toastr.info('Изменения сохранены.', '', { 'hideDuration': '100' });
            },
            error: function() {
                toastr.error('Не удалось изменить время.');
            }
        });

        $('[data-clear]').on('click', function() {
            $('[name="Hour"]').val('--');
            $('[name="Minutes"]').val('--');
        });
    });


</script>


@section scripts
{
 @Scripts.Render("~/bundles/chart")
}
