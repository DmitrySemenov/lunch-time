@using Dinner.Entities
@model Dinner.Models.OrdersModel

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta charset="utf-8" />
    <title>Заказы на @Model.Date.ToString("dd.MM.yyyy")</title>
    <link href="~/favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <meta name="viewport" content="width=device-width" />
    @Styles.Render("~/Content/css/dinner")
    
    <style >

        @@media print
        {
            @@page
            {
                margin: .5cm .5cm;

                counter-increment: page;
                counter-reset: page 1;
                @@bottom-right {
                    content: counter(page) " of " counter(pages);
                }
            }
        }

        html, body{
            font-size: 11px;
            padding: 0px;
            margin: 0px;
        }

        h4, h5, h6 {
            margin-top: 4px;
            margin-bottom: 4px;
        }

        .table thead > tr > th, 
        .table tbody > tr > th, 
        .table tfoot > tr > th, 
        .table thead > tr > td, 
        .table tbody > tr > td, 
        .table tfoot > tr > td {
            padding: 0px 8px;
        }

        .box_rotate
        {
            -ms-transform: rotate(270deg); /* IE 9 */
            -moz-transform: rotate(270deg); /* Firefox */
            -webkit-transform: rotate(270deg); /* Safari and Chrome */
            -o-transform: rotate(270deg); /* Opera */
            filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3); /* IE6,IE7 */
            -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=3)"; /* IE8 */
        }

        .table .box_rotate_holder
        {
            padding: 0px;
            vertical-align: middle; 
            line-height: 0; 
            height: 40px; 
            width: 15px; 
            white-space: nowrap
        }
        
        /*.row:before, .row:after {
            display: block;
        }*/
    </style>
</head>
<body  class="container">
    <div>
        <h4>
            <b>Сводка заказов на @Model.Date.ToString("D")</b>
        </h4>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <td class="col-xs-12">Наименование</td>
                    <td>Количество</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model.Orders)
                {
                    <tr>
                        <td>
                            @order.Course.Name
                        </td>
                        <td>
                            @order.Quantity
                        </td>
                    </tr>
                }

            </tbody>
        </table>
        <h4>
            Итого:
            <span>
                @string.Format("{0:C}", Model.Orders.Sum(order => order.Course.Price * order.Quantity))
            </span>
        </h4>
    </div>
    
    <hr>

    <div>
        <h4><b>Список заказов на @Model.Date.ToString("D")</b></h4>
        <br />
        @{
            int index = 0;
        }
        @foreach (var userOrder in Model.UsersOrders)
        {
            if (index % 2 == 0)
            {
                @Html.Raw("<div class='row' style='page-break-inside:avoid'><div class='col-xs-6 col-md-6'>");
            }
            else
            {
                @Html.Raw("<div class='col-xs-6 col-md-6'>");
            }

            <h4>
                @userOrder.UserName
                <span style="float: right; font-weight: bold;">
                    @string.Format("{0:C}",userOrder.Orders.Sum(order => order.Course.Price * order.Quantity)) 
                </span>        
            </h4>
            <table class="table table-bordered">
                @*<thead>
                    <tr>
                        <td class="col-xs-12">Наименование</td>
                        <td>Количество</td>
                    </tr>
                </thead>*@
                <tbody>
                    @{
                        bool hasBox = userOrder.Orders.Any(x => x.Course.Boxindex > 0);
                        int currentBoxIndex = 0;
                        var orders = userOrder.Orders.OrderBy(x => x.Course.Boxindex);
                    }
                    @foreach (var order in orders)
                    {
                        <tr>
                            @if (hasBox && order.Course.Boxindex == currentBoxIndex)
                            {
                                <td class="box_rotate_holder" rowspan="@(orders.Count(x=>x.Course.Boxindex == currentBoxIndex))">
                                    @if (currentBoxIndex != 0)
                                    {
                                        <div class="box_rotate" >Бокс <b>@(currentBoxIndex)</b></div>
                                    }
                                    @{ currentBoxIndex++;}
                                </td>  
                            }
                            <td>
                                @order.Course.Name
                            </td>
                            <td>
                                @order.Quantity
                            </td>
                        </tr>
                    }

                </tbody>
            </table>
            if (index % 2 == 0)
            {
                @Html.Raw("</div>");
            }
            else
            {
                @Html.Raw("</div></div>");
            }  
            index = index+1;
        }
       </div>
</body>
</html>
